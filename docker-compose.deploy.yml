version: '3.8'

services:
  # EvolSynth API Application
  evolsynth-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: evolsynth-api:latest
    container_name: evolsynth-api
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKERS=${WORKERS:-4}
      - MAX_CONCURRENCY=${MAX_CONCURRENCY:-12}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
    volumes:
      - ./logs:/home/app/logs
      - ./tmp:/home/app/tmp
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - evolsynth-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolsynth-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.evolsynth-api.tls=true"
      - "traefik.http.routers.evolsynth-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.evolsynth-api.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "python", "health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: evolsynth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD:-}"
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - evolsynth-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Insight (Optional - for monitoring)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: evolsynth-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOSTS=redis:6379
    depends_on:
      - redis
    networks:
      - evolsynth-network
    profiles:
      - monitoring

  # Nginx Reverse Proxy (Alternative to Traefik)
  nginx:
    image: nginx:alpine
    container_name: evolsynth-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - evolsynth-api
    networks:
      - evolsynth-network
    profiles:
      - nginx

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: evolsynth-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - evolsynth-network
    profiles:
      - monitoring

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: evolsynth-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - evolsynth-network
    profiles:
      - monitoring

  # Loki (Log Aggregation)
  loki:
    image: grafana/loki:latest
    container_name: evolsynth-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - evolsynth-network
    profiles:
      - monitoring

  # Promtail (Log Collector)
  promtail:
    image: grafana/promtail:latest
    container_name: evolsynth-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/evolsynth:ro
      - nginx-logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - evolsynth-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  evolsynth-network:
    driver: bridge
    name: evolsynth-network 